---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform AWS Aurora

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-aurora

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v1.1.7-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-aurora/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-aurora/actions/workflows/tfsec.yml"
  - name: "static-checks"
    image: "https://github.com/clouddrove/terraform-aws-aurora/actions/workflows/terraform.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-aurora/actions/workflows/terraform.yml"
#  description of this project
description: |-
  Terraform module which creates RDS Aurora database resources on AWS and can create different type of databases. Currently it supports Postgres and MySQL.

# extra content
include:
  - "terraform.md"

# How to use this project
usage : |-
  Here are some examples of how you can use this module in your inventory structure:

  ### Aurora MySQL
  ```hcl
    module "aurora" {
      source                          = "clouddrove/aurora/aws"
      version                         = "1.0.1"

      name                            = "backend"
      environment                     = "test"
      label_order                     = ["name", "environment"]
      username                        = "admin"
      database_name                   = "dt"
      engine                          = "aurora-mysql"
      engine_version                  = "5.7.12"
      subnets                         = "subnet-xxxxxxxxx"
      aws_security_group              = [sg-xxxxxxxxxxx]
      replica_count                   = 1
      instance_type                   = "db.t2.small"
      apply_immediately               = true
      skip_final_snapshot             = true
      publicly_accessible             = false
    }
  ```
  ### Aurora Postgres
  ```hcl
      module "postgres" {
        source              = "clouddrove/aurora/aws"
        version             = "1.0.1"
        name                = "backend"
        environment         = "test"
        label_order         = ["name", "environment"]

        username            = "root"
        database_name       = "test_db"
        engine              = "aurora-postgresql"
        engine_version      = "9.6.9"
        subnets             = "subnet-xxxxxxxxx"
        aws_security_group  = [sg-xxxxxxxxxxx]
        replica_count       = 1
        instance_type       = "db.r4.large"
        apply_immediately   = true
        skip_final_snapshot = true
        publicly_accessible = false
      }
  ```
  ### Aurora Serverless MySQL
  ```hcl
    module "aurora" {
      source                          = "clouddrove/aurora/aws"
      version                         = "1.0.1"
      name                            = "aurora-mysql-serverless"
      environment                     = "test"
      label_order                     = ["name", "environment"]
      serverless_enabled              = true
      min_capacity                    = 1
      max_capacity                    = 4
      username                        = "root"
      database_name                   = "test_db"
      engine                          = "aurora"
      engine_version                  = "5.6.10a"
      kms_key_id                      = module.kms_key.key_arn
      subnets                         = "subnet-xxxxxxxxx"
      aws_security_group              = [sg-xxxxxxxxxxx]
      apply_immediately               = true
      skip_final_snapshot             = true
      availability_zones              = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
    }
  ```
  ### Aurora Serverless Postgres
  ```hcl
      module "postgres" {
        source                          = "clouddrove/aurora/aws"
        version                         = "1.0.1"
        name                            = "aurora-Postgres"
        environment                     = "test"
        label_order                     = ["name", "environment"]
        enable                          = true
        serverless_enabled              = true
        min_capacity                    = 2
        max_capacity                    = 4
        username                        = "root"
        database_name                   = "test_db"
        engine                          = "aurora-postgresql"
        engine_version                  = "10.7"
        kms_key_id                      = module.kms_key.key_arn
        subnets                         = "subnet-xxxxxxxxx"
        aws_security_group              = [sg-xxxxxxxxxxx]
        apply_immediately               = true
        skip_final_snapshot             = true
        availability_zones              = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
      }
  ```
